Hello - from /home/nathan/.atom/packages/ide-reason/rls/rls-linux-1.6.1.exe
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"format_width":80,"autoRebuild":true,"per_value_codelens":false,"dependencies_codelens":false,"opens_codelens":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","languageId":"ocaml","version":1,"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonmetric.mli","languageId":"ocaml","version":1,"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n\n  val deg_to_rad : float list -> float\n\n  val rad_to_deg : float list -> float\n\n  val sin : float list -> float\n\n  val cos : float list -> float\n\n  val tan : float list -> float\n\n  val sec : float list -> float\n\n  val cosec : float list -> float\n\n  val cotan : float list -> float\n\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs\nmodule Trigonometric_CFU : CFU_sig\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","languageId":"ocaml","version":1,"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":2},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":3},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":2},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":3},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":4},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonmetric.mli","version":2},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n\n  val deg_to_rad : float list -> float\n\n  val rad_to_deg : float list -> float\n\n  val sin : float list -> float\n\n  val cos : float list -> float\n\n  val tan : float list -> float\n\n  val sec : float list -> float\n\n  val cosec : float list -> float\n\n  val cotan : float list -> float\n\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs\nmodule Trigonometric_CFU : CFU_sig\n"}]}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonmetric.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonmetric.mli"},"position":{"line":6,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonmetric.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli","languageId":"ocaml","version":1,"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n\n  val deg_to_rad : float list -> float\n\n  val rad_to_deg : float list -> float\n\n  val sin : float list -> float\n\n  val cos : float list -> float\n\n  val tan : float list -> float\n\n  val sec : float list -> float\n\n  val cosec : float list -> float\n\n  val cotan : float list -> float\n\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs\nmodule Trigonometric_CFU : CFU_sig\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli","version":1}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":13,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":51,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":55,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":51,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":53,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":53,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"range":{"start":{"line":53,"character":0},"end":{"line":57,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":52,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":52,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":55,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":55,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":57,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":45,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":54,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":63,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli"},"position":{"line":7,"character":71}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.mli"},"position":{"line":7,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.02121925354ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":28,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":33,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":4},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> lFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":5},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> leFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":6},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> letFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":7},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":8},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":9},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let xFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":10},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let xFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":11},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":12},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x =Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":13},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x =Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":14},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x = Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.424861907959ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":15},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x =Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":16},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":17},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":18},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let xFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":19},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":20},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":21},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> letFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":22},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> letFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":23},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> leFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":24},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> lFloat.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":25},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":26},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl ->Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":27},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":28},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> lFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":29},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> leFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":30},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> letFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":32}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":31},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":32},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":33},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let xFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":34},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let xFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":35},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":36},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x -Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":37},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0481605529785ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":38},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x =Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":39},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x =Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":40},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":41},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = dFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":42},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":30,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":39,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0338554382324ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":39,"character":0}}}
[server] Got a method textDocument/definition
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":43},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":44},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":45},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":46},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hdFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":47},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd]Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":48},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd]Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":49},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd]Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":50},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":51},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] iFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":52},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] inFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":53},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] in Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":54},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] in Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":55},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] in \nFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":56},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = [hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":57},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = d[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":58},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = de[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":59},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":41}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":60},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg [hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":61},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":62},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":64}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":63},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_t[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":66}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":64},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":68}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":32},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":65},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":69}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":33},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":66},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_t[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":71}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":67},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":68},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_r[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":73}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":69},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_ra[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":74}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":70},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad[hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":75}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":36},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":71},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":39,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":72},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":73},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":74},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi)\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":75},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi)\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":76},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi)\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0360012054443ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0231266021729ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":77},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      r(Float.div (hd |> Float.mul 180) Float.pi)\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":78},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi)\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.018835067749ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":79},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":80},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      (Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":81},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":82},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":30}}}
[server] Got a method textDocument/definition
[server] processing took 0.0247955322266ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0350475311279ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":31}}}
[server] Got a method textDocument/definition
[server] processing took 0.0491142272949ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":83},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> \n      Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":84},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> \n    Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":85},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> \n  Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":86},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> \nFloat.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":38,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":87},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":88},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":89},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":90},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":91},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":32,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":37,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":92},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":93},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> Float.sin hd\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":94},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl ->  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":95},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> l Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":96},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> le Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":97},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":76}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":98},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":99},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":100},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":101},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":102},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":103},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":104},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x =  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":105},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = d Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":106},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = de Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":107},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":120}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":29},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":108},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_ Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":124}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":30},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":109},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_t Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":126}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":110},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":127}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":32},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":111},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_ Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":128}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":33},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":112},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_r Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":130}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":34},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":113},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_ra Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":132}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":114},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":133}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":36},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":115},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":116},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [] Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":117},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [] Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":118},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [h] Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":119},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":120},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd]  Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":121},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] i Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":122},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":123},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":124},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":125},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":126},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n        Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":127},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":128},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":129},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      raFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":130},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      radFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":134}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":131},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":141}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":10},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":132},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_tFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":143}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":133},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_toFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":144}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":12},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":134},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":145}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":135},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_dFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":146}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":136},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":147}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":137},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":148}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":138},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":139},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":140},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin hd\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":141},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":142},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":143},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":144},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin h)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":145},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin )\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0147819519043ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":146},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":35}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00810623168945ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":42,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":44,"character":33}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":44,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":44,"character":34}}}
[server] Got a method textDocument/definition
[server] processing took 0.00810623168945ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":46,"character":27}}}
[server] Got a method textDocument/definition
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":147},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> \nFloat.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":148},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> \n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0147819519043ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":149},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":53,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":54,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":54,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":54,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":24}}}
[server] Got a method textDocument/definition
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":150},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":151},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":54,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":152},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":153},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":154},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":56,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":155},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":156},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":157},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":158},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":159},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":66,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0197887420654ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":66,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":66,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":160},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":161},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":66,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":162},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":163},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":164},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":68,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":71,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":72,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":72,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":72,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":72,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":165},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":166},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] inFloat.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":72,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":167},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":168},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\nFloat.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":169},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0379085540771ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":76,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":74,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":54,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":40,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":34,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":31,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":43,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":27}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":170},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n        Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/definition
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":171},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":172},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":173},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":174},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":175},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.018835067749ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":48,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":176},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":177},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":178},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0548362731934ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":11}}}
[server] Got a method textDocument/definition
[server] processing took 0.0238418579102ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":179},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0312328338623ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":180},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg)Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":181},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg)Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":182},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":183},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":184},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":185},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":56,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":186},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":187},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":188},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":31}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":56,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":60,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":189},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":190},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":191},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":192},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":193},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":194},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":195},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":6}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":196},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":197},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":198},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":199},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":200},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":201},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":202},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":203},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_degFloat.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":204},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0348091125488ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":205},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":206},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":18}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":207},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":208},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":209},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":210},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos h)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":211},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos )\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":212},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan hd)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":49,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":213},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan h)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":214},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan )\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":215},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":55,"character":29}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":216},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos h))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":217},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos ))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":218},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin hd))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":61,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":219},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin h))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":220},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin ))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":221},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan hd))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":67,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":222},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan h))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":223},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan ))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":224},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":225},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tanx))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":149}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":41},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":226},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":227},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan ))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":228},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":73,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0498294830322ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":77,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":229},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"d\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":230},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"de\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":231},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":285}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":3}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":232},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":233},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":234},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0360012054443ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":235},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":236},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":237},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":238},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":239},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":240},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":241},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":242},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":243},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":244},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":245},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":246},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":247},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":248},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":249},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 312, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":250},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":251},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    \n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":252},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":253},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":254},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":255},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":256},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"r\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":257},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"ra\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":258},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":293}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":259},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":260},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":261},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":262},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"s\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":263},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"si\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":264},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":318}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0369548797607ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":265},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":266},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":267},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":268},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"c\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":269},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"co\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":270},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":323}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0162124633789ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":271},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":272},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":273},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":274},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"t\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":275},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"ta\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":276},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":329}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":81,"character":24}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":277},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":278},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":279},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":280},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"s\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":281},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"se\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":282},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":337}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0269412994385ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0290870666504ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":283},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":284},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":285},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":286},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"s\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":287},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"so\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":288},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"soe\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":343}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":289},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"so\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":290},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"s\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":291},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":292},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"c\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":293},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"co\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":294},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":347}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":295},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cose\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":349}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":10},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":296},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"deg\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":350}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":297},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"de\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":298},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"d\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":299},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":300},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"c\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":301},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"co\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":302},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cot\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":351}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0360012054443ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":303},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cota\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":355}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":10},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":304},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":356}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 357, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":305},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.c);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":357}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":306},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.co);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":360}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":40},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":307},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.cot);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":362}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":41},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0181198120117ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":308},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.cota);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":363}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":42},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":309},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":364}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":43},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":89,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":310},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.c);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":365}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":311},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.co);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":369}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":40},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":312},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.cos);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":370}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":41},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0147819519043ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":313},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.cose);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":371}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":42},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.02121925354ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":314},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":372}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":43},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0109672546387ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":88,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":315},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.s);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":374}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":316},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.se);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":379}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":317},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":380}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":87,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":318},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.t);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":382}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":319},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.ta);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":386}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":320},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":387}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":86,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":321},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.c);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":388}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":322},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.co);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":393}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":323},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":394}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0119209289551ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":85,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":324},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.s);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":395}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":325},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.si);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":399}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0221729278564ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":326},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":400}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":84,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":327},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.r);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":401}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":328},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.ra);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":405}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":329},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":406}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":330},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":407}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":40},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":40}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 410, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":331},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_t);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":409}}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":41},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":332},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_to);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":411}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":42},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0171661376953ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":333},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_to_);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":412}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":43},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0448226928711ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":334},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_to_d);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":414}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":44},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":335},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_to_de);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":415}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":45},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":336},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":416}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":46},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0121593475342ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":83,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":337},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.d);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":417}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":37},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":338},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.de);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":420}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":38},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":339},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":421}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":39},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":340},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":422}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":40},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":341},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_t);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":423}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":41},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":342},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_to);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":424}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":42},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":42}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0319480895996ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":343},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_to_);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":425}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":43},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0231266021729ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":43}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0278949737549ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":344},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_to_r);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":427}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":44},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":345},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_to_ra);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":429}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":45},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":346},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the trigonometric cfu. A module\n    that matches [Trigonometric_Funcs] is suitable for use in [Trigonometric_CFU]. *)\nmodule type Trigonometric_Funcs = sig\n  val deg_to_rad : float list -> float\n  val rad_to_deg : float list -> float\n  val sin : float list -> float\n  val cos : float list -> float\n  val tan : float list -> float\n  val sec : float list -> float\n  val cosec : float list -> float\n  val cotan : float list -> float\nend\n\nmodule Trigonometric_Functions : Trigonometric_Funcs = struct\n\n  let deg_to_rad (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul Float.pi) 180.\n    | _ -> failwith \"InvalidInput\"\n\n  let rad_to_deg (f : float list) =\n    match f with\n    | hd :: tl -> Float.div (hd |> Float.mul 180) Float.pi\n    | _ -> failwith \"InvalidInput\"\n\n  let sin (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.sin x)\n    | _ -> failwith \"InvalidInput\"\n\n  let cos (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.cos x)\n    | _ -> failwith \"InvalidInput\"\n\n  let tan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.tan x)\n    | _ -> failwith \"InvalidInput\"\n\n  let sec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.cos x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cosec (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.sin x))\n    | _ -> failwith \"InvalidInput\"\n\n  let cotan (f : float list) =\n    match f with\n    | hd :: tl -> let x = deg_to_rad [hd] in\n      rad_to_deg (Float.div 1 (Float.tan x))\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Trigonometric_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"deg\", Trigonometric_Functions.deg_to_rad);\n    (\"rad\", Trigonometric_Functions.rad_to_deg);\n    (\"sin\", Trigonometric_Functions.sin);\n    (\"cos\", Trigonometric_Functions.cos);\n    (\"tan\", Trigonometric_Functions.tan);\n    (\"sec\", Trigonometric_Functions.sec);\n    (\"cosec\", Trigonometric_Functions.cosec);\n    (\"cotan\", Trigonometric_Functions.cotan);\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":430}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":46},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.0360012054443ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":82,"character":46}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/formatting","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"options":{"tabSize":2,"insertSpaces":true}}}
[server] Got a method textDocument/formatting
[server] processing took 0.00500679016113ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 433, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml","version":1}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to find project root dir"}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/trigonometric.ml"},"position":{"line":64,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
