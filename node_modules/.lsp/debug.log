Hello - from /home/nathan/.atom/packages/ide-reason/rls/rls-linux-1.6.1.exe
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json", "globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"format_width":80,"autoRebuild":true,"per_value_codelens":false,"dependencies_codelens":false,"opens_codelens":false}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","languageId":"ocaml","version":1,"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.mli","languageId":"ocaml","version":1,"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n      list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\n\n\nend\nmodule Environment : Environment_sig\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/cfu.mli","languageId":"ocaml","version":1,"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n        (** type primitive is the type of the value that the calculator works wi            th*)\n        type primitive\n\n        (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n        val operation_list : (string * ( primitive  list -> primitive )) list\nend\n\n(** A module that implements the functions needed for the arithmetic cfu. A modu    le that matches [Arithmetic_Funcs] is suitable for use in [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n\n        (** [add s] returns the result of adding the first element of s to the\n        val add : float list -> float\n            second element of s. *)\n\n        (** [subtract s] returns the result of subtracting the first element of             s from the second element of s. *)\n        val subtract : float list -> float\n\n        (** [multiply s] returns the result of multiplying the first element of             s by the second element of s. *)\n        val multiply : float list -> float\n\n        (** [divide s] returns the result of dividing the first element of s by             the second element of s. *)\n        val divide : float list -> float\n\n        val exponentiation : float list -> float\n\n        val modulus : float list -> float\n\n        val logarithm : float list -> float\nend\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.ml","languageId":"ocaml","version":1,"text":"(** A module that implements the functions needed for the arithmetic cfu.\n    A module that matches [Arithmetic_Funcs] is suitable for use in\n    [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  val add2 : float list -> float\n  val subtract : float list -> float\n  val multiply : float list -> float\n  val divide : float list -> float\n  val exponentiation : float list -> float\n  val modulus : float list -> float\n  val logarithm : float list -> float\n  val equal_to : float list -> float\nend\n\nmodule type CFU_sig = sig\n  (** type primitive is the type of the value that the calculator works with*)\n  type primitive\n  (** An [operation_list] is an association list that maps operation symbols\n      to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs = struct\n\n  let add2 (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.add hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let subtract (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.sub hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let multiply (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.mul hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let divide (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.div hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let exponentiation (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (hd1 ** hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let modulus (s : float list) =\n    match s with\n    | hd1::hd2::tl ->  Stdlib.mod_float hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let rec log (a : float) (b : float) =\n    let n = (Float.compare a b) in\n    match n with\n    | _ when n < 0 -> 0.0\n    | _ -> 1.0 +. log (Float.div a b) b\n\n  let logarithm (s : float list) =\n    match s with\n    | hd1::hd2::tl -> log hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let equal_to (s : float list) =\n   match s with\n   | hd1::hd2::tl -> (if (hd1 = hd2) then 1.0 else 0.0)\n   | _ -> failwith \"InvalidInput\"\nend\n\nmodule Arithmetic_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"+\", Arithmetic_Functions.add2);\n    (\"-\", Arithmetic_Functions.subtract);\n    (\"*\", Arithmetic_Functions.multiply);\n    (\"/\", Arithmetic_Functions.divide);\n    (\"^\", Arithmetic_Functions.exponentiation);\n    (\"%\", Arithmetic_Functions.modulus);\n    (\"log\", Arithmetic_Functions.logarithm);\n    (\"==\", Arithmetic_Functions.equal_to)\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.mli","languageId":"ocaml","version":1,"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the arithmetic cfu. A modu    le that matches [Arithmetic_Funcs] is suitable for use in [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  (** [add s] returns the result of adding the first element of s to the\n      second element of s.*)\n\n  val add2 : float list -> float\n\n  (** [subtract s] returns the result of subtracting the first element of             s from the second element of s. *)\n  val subtract : float list -> float\n\n  (** [multiply s] returns the result of multiplying the first element of             s by the second element of s. *)\n  val multiply : float list -> float\n\n  (** [divide s] returns the result of dividing the first element of s by             the second element of s. *)\n  val divide : float list -> float\n\n  val exponentiation : float list -> float\n\n  val modulus : float list -> float\n\n  val logarithm : float list -> float\n\n  val equal_to : float list -> float\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs\nmodule Arithmetic_CFU : CFU_sig\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","languageId":"ocaml","version":1,"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\n\n\n(** [parse s] parses [s] into an AST. *)\nlet parse (s : string) : expr = \n  let lexbuf = Lexing.from_string s in\n  let ast = Parser.prog Lexer.read lexbuf in\n  ast\n\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  s |> parse |> eval curr_env |> string_of_val\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":18,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":24,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":24,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0200271606445ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0300407409668ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":14}}}
[server] Got a method textDocument/definition
[server] processing took 0.0131130218506ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":2},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_bindi ng : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":3},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_bindi ng : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":4},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":5},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":25,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0240802764893ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":26,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0228881835938ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":6},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":7},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\nv\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":8},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\nva\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":27,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":9},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\nv\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":10},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml","version":11},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n       list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\nend\n\n\n(** [Environment] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s)*)\nmodule Environment : Environment_sig = struct\n\n  (** type t is the type of the memory_bindings. *)\n\n  type t = (string * float) list\n\n\n  let empty = []\n\n\n  let is_empty mb = mb = empty\n\n\n  let memory_bindings = empty\n\n\n  let contains key mb =\n    List.mem_assoc key mb\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the value t. *)\n  let add_binding k v mb =\n    if (List.mem_assoc k mb)\n    then begin let new_list = (List.remove_assoc k mb) in (k,v) :: new_list end\n    else (k,v) :: mb\n\n  let remove_binding key mb =\n    List.remove_assoc key mb\n\n  let get_val key mb =\n    match (List.assoc_opt key mb) with\n    |Some v -> v\n    |None -> raise Not_found\n\n  let member key mb =\n    (List.mem_assoc key mb)\n\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n      to be printed to the user\n  let format_bindings (b : t) =\n    match b with\n    | [] -> \"\"\n    | hd::tl -> let (key, val) = hd in\n      String.concat \"\" [key;(string_of_float val);] *)\n\n  let rec to_list t =\n    match t with \n    |[] -> \"empty\"\n    |(k,v)::tail -> (\"(\"^k^\" = \"^Float.to_string(v)^\")/n\" )^to_list tail\n\n  let choose (t:(string * float) list) = \n    match t with \n    |[] -> raise Not_found\n    |(k,v)::tail -> k\n\nend\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":26,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.ml"},"position":{"line":26,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0138282775879ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.mli","version":2},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n      list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\n\n\nend\nmodule Environment : Environment_sig\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.mli","version":3},"contentChanges":[{"text":"(** [Environment_sig] is a module meant to define environment of the calculator.\n    This module contains the array of local memory bindings which are the result of\n    the calculator parsing statement(s) *)\n\nmodule type Environment_sig = sig\n\n  (** type t is the type of the memory_bindings. *)\n  type t\n\n  (** [empty] is the empty memory_bindings. *)\n  val empty : t\n\n  (** [is_empty mem_binds] is true if memory_bindings is empty\n      otherwise is false. *)\n  val is_empty: t -> bool\n\n  (**[memory_bindings] is an association list that maps variable names\n      to values. It is used to store local variables. *)\n  val memory_bindings : t\n\n  (** [contains k t] is true if k is in t. Otherwise is false. *)\n  val contains : string -> t -> bool\n\n  (** [add_binding s t] adds a new binding s with value t to memory_bindings.\n      Returns the new list. *)\n  val add_binding : string -> float -> t -> t\n\n  (** [remove_binding s] removes the binding in memory_bindings that\n      corresponds with key. returns new_list*)\n  val remove_binding : string -> t -> t\n\n  (** [get_val key] returns the value that is bound in memory_bindings\n      that corresponds to key. *)\n  val get_val : string -> t -> float\n\n  (** [member key] is true if key corresponds to a key in memory_bindings\n      otherwise is false. *)\n  val member : string -> t -> bool\n\n  (** [format_bindings b] returns a string with the bindings in b formatted\n       to be printed to the user\n  val format_bindings : t -> string *)\n\n  (** [to_list t] is the string list representation of the association \n      list [t] *)\n  val to_list : t -> string \n\n  (** [choose t] is the value of the first binding of the association list*)\n  val choose : t -> string\n\n\nend\nmodule Environment : Environment_sig\n"}]}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/cfu.mli","version":2},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n        (** type primitive is the type of the value that the calculator works wi            th*)\n        type primitive\n\n        (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n        val operation_list : (string * ( primitive  list -> primitive )) list\nend\n\n(** A module that implements the functions needed for the arithmetic cfu. A modu    le that matches [Arithmetic_Funcs] is suitable for use in [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n\n        (** [add s] returns the result of adding the first element of s to the\n        val add : float list -> float\n            second element of s. *)\n\n        (** [subtract s] returns the result of subtracting the first element of             s from the second element of s. *)\n        val subtract : float list -> float\n\n        (** [multiply s] returns the result of multiplying the first element of             s by the second element of s. *)\n        val multiply : float list -> float\n\n        (** [divide s] returns the result of dividing the first element of s by             the second element of s. *)\n        val divide : float list -> float\n\n        val exponentiation : float list -> float\n\n        val modulus : float list -> float\n\n        val logarithm : float list -> float\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/cfu.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.032901763916ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.ml","version":2},"contentChanges":[{"text":"(** A module that implements the functions needed for the arithmetic cfu.\n    A module that matches [Arithmetic_Funcs] is suitable for use in\n    [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  val add2 : float list -> float\n  val subtract : float list -> float\n  val multiply : float list -> float\n  val divide : float list -> float\n  val exponentiation : float list -> float\n  val modulus : float list -> float\n  val logarithm : float list -> float\n  val equal_to : float list -> float\nend\n\nmodule type CFU_sig = sig\n  (** type primitive is the type of the value that the calculator works with*)\n  type primitive\n  (** An [operation_list] is an association list that maps operation symbols\n      to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs = struct\n\n  let add2 (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.add hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let subtract (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.sub hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let multiply (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.mul hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let divide (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.div hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let exponentiation (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (hd1 ** hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let modulus (s : float list) =\n    match s with\n    | hd1::hd2::tl ->  Stdlib.mod_float hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let rec log (a : float) (b : float) =\n    let n = (Float.compare a b) in\n    match n with\n    | _ when n < 0 -> 0.0\n    | _ -> 1.0 +. log (Float.div a b) b\n\n  let logarithm (s : float list) =\n    match s with\n    | hd1::hd2::tl -> log hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let equal_to (s : float list) =\n   match s with\n   | hd1::hd2::tl -> (if (hd1 = hd2) then 1.0 else 0.0)\n   | _ -> failwith \"InvalidInput\"\nend\n\nmodule Arithmetic_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"+\", Arithmetic_Functions.add2);\n    (\"-\", Arithmetic_Functions.subtract);\n    (\"*\", Arithmetic_Functions.multiply);\n    (\"/\", Arithmetic_Functions.divide);\n    (\"^\", Arithmetic_Functions.exponentiation);\n    (\"%\", Arithmetic_Functions.modulus);\n    (\"log\", Arithmetic_Functions.logarithm);\n    (\"==\", Arithmetic_Functions.equal_to)\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.ml","version":3},"contentChanges":[{"text":"(** A module that implements the functions needed for the arithmetic cfu.\n    A module that matches [Arithmetic_Funcs] is suitable for use in\n    [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  val add2 : float list -> float\n  val subtract : float list -> float\n  val multiply : float list -> float\n  val divide : float list -> float\n  val exponentiation : float list -> float\n  val modulus : float list -> float\n  val logarithm : float list -> float\n  val equal_to : float list -> float\nend\n\nmodule type CFU_sig = sig\n  (** type primitive is the type of the value that the calculator works with*)\n  type primitive\n  (** An [operation_list] is an association list that maps operation symbols\n      to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs = struct\n\n  let add2 (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.add hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let subtract (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.sub hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let multiply (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.mul hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let divide (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.div hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let exponentiation (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (hd1 ** hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let modulus (s : float list) =\n    match s with\n    | hd1::hd2::tl ->  Stdlib.mod_float hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let rec log (a : float) (b : float) =\n    let n = (Float.compare a b) in\n    match n with\n    | _ when n < 0 -> 0.0\n    | _ -> 1.0 +. log (Float.div a b) b\n\n  let logarithm (s : float list) =\n    match s with\n    | hd1::hd2::tl -> log hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let equal_to (s : float list) =\n   match s with\n   | hd1::hd2::tl -> (if (hd1 = hd2) then 1.0 else 0.0)\n   | _ -> failwith \"InvalidInput\"\nend\n\nmodule Arithmetic_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"+\", Arithmetic_Functions.add2);\n    (\"-\", Arithmetic_Functions.subtract);\n    (\"*\", Arithmetic_Functions.multiply);\n    (\"/\", Arithmetic_Functions.divide);\n    (\"^\", Arithmetic_Functions.exponentiation);\n    (\"%\", Arithmetic_Functions.modulus);\n    (\"log\", Arithmetic_Functions.logarithm);\n    (\"==\", Arithmetic_Functions.equal_to)\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.ml"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0190734863281ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":2},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\n\n\n(** [parse s] parses [s] into an AST. *)\nlet parse (s : string) : expr = \n  let lexbuf = Lexing.from_string s in\n  let ast = Parser.prog Lexer.read lexbuf in\n  ast\n\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  s |> parse |> eval curr_env |> string_of_val\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":3},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\n\n\n(** [parse s] parses [s] into an AST. *)\nlet parse (s : string) : expr = \n  let lexbuf = Lexing.from_string s in\n  let ast = Parser.prog Lexer.read lexbuf in\n  ast\n\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  s |> parse |> eval curr_env |> string_of_val\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":0,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0178813934326ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.mli","version":2},"contentChanges":[{"text":"(** An abstract module type that is meant to structure the CFU modules (ie. Arit    metic functions, calculus functions, statistics functions). A module that ma    tches [CFU_sig] is suitable for use in the [Calc] module. *)\nmodule type CFU_sig = sig\n\n  (** type primitive is the type of the value that the calculator works wi            th*)\n  type primitive\n\n  (** An [operation_list] is an association list that maps operation symbo            ls to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\n\n(** A module that implements the functions needed for the arithmetic cfu. A modu    le that matches [Arithmetic_Funcs] is suitable for use in [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  (** [add s] returns the result of adding the first element of s to the\n      second element of s.*)\n\n  val add2 : float list -> float\n\n  (** [subtract s] returns the result of subtracting the first element of             s from the second element of s. *)\n  val subtract : float list -> float\n\n  (** [multiply s] returns the result of multiplying the first element of             s by the second element of s. *)\n  val multiply : float list -> float\n\n  (** [divide s] returns the result of dividing the first element of s by             the second element of s. *)\n  val divide : float list -> float\n\n  val exponentiation : float list -> float\n\n  val modulus : float list -> float\n\n  val logarithm : float list -> float\n\n  val equal_to : float list -> float\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs\nmodule Arithmetic_CFU : CFU_sig\n"}]}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0219345092773ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.mli"},"position":{"line":9,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/environment.mli"},"position":{"line":0,"character":0}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":0,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":31,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.00309944152832ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":31,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":31,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.00977516174316ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
=== Project root: /home/nathan/repos/CS3110/Final-Project
Detected `opam` dependency manager for local use
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /home/nathan/repos/CS3110/Final-Project/jbuild"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/arithmetic.ml","version":4},"contentChanges":[{"text":"(** A module that implements the functions needed for the arithmetic cfu.\n    A module that matches [Arithmetic_Funcs] is suitable for use in\n    [Arithmetic_CFU]. *)\nmodule type Arithmetic_Funcs = sig\n  val add2 : float list -> float\n  val subtract : float list -> float\n  val multiply : float list -> float\n  val divide : float list -> float\n  val exponentiation : float list -> float\n  val modulus : float list -> float\n  val logarithm : float list -> float\n  val equal_to : float list -> float\nend\n\nmodule type CFU_sig = sig\n  (** type primitive is the type of the value that the calculator works with*)\n  type primitive\n  (** An [operation_list] is an association list that maps operation symbols\n      to functions *)\n  val operation_list : (string * ( primitive  list -> primitive )) list\n  (** [find s] is the operation that is associated with [s] in the operation\n      list *)\n  val find_function : string -> (float list -> float)\nend\n\nmodule Arithmetic_Functions : Arithmetic_Funcs = struct\n\n  let add2 (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.add hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let subtract (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.sub hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let multiply (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.mul hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let divide (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (Float.div hd1 hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let exponentiation (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (hd1 ** hd2)\n    | _ -> failwith \"InvalidInput\"\n\n  let modulus (s : float list) =\n    match s with\n    | hd1::hd2::tl ->  Stdlib.mod_float hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let rec log (a : float) (b : float) =\n    let n = (Float.compare a b) in\n    match n with\n    | _ when n < 0 -> a\n    | _ -> 1.0 +. log (Float.div a b) b\n\n  let logarithm (s : float list) =\n    match s with\n    | hd1::hd2::tl -> log hd1 hd2\n    | _ -> failwith \"InvalidInput\"\n\n  let equal_to (s : float list) =\n    match s with\n    | hd1::hd2::tl -> (if (hd1 = hd2) then 1.0 else 0.0)\n    | _ -> failwith \"InvalidInput\"\nend\n\nmodule Arithmetic_CFU : CFU_sig = struct\n\n  type primitive = float\n\n  let operation_list = [\n    (\"+\", Arithmetic_Functions.add2);\n    (\"-\", Arithmetic_Functions.subtract);\n    (\"*\", Arithmetic_Functions.multiply);\n    (\"/\", Arithmetic_Functions.divide);\n    (\"^\", Arithmetic_Functions.exponentiation);\n    (\"%\", Arithmetic_Functions.modulus);\n    (\"log\", Arithmetic_Functions.logarithm);\n    (\"==\", Arithmetic_Functions.equal_to)\n  ]\n\n  let find_function (identifier : string) =\n    match List.assoc_opt identifier operation_list with\n    |Some f -> f\n    |None -> failwith (identifier^\" is not a valid imported function\")\n\nend\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":4},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml","version":5},"contentChanges":[{"text":"open Ast\nopen Stdlib\nopen ANSITerminal\nopen Arithmetic\nopen Environment\nopen Lexing \n\n\nexception SyntaxError of string\nexception UnexpectedError of string\n\n(** [parse_error lexbuf] is the error to raise when parser/lexeing raises \n    a parsing or lexing error *)\nlet parse_error lexbuf = raise (SyntaxError \"Syntax error, please try again\")\n\n(** [unexp_error lexbuf] is the error to raise when parser/lexeing fails *)\nlet unexp_err lexbuf = raise (UnexpectedError \"Unexepcted error, please try again\")\n\n\nlet parse parser_start s =\n  let lexbuf = from_string s in\n  try parser_start Lexer.read lexbuf with\n  | Parser.Error | Lexer.Syntax_error -> parse_error lexbuf\n  | Failure s -> unexp_err s \n\n\nlet parse_expr = parse Parser.prog\n\n\n(** [is_value e] is whether [e] is a value. *)\nlet is_value : expr -> bool = function\n  | Float _ | Boolean _ -> true\n  | Var _ |Let _ |Binop _ | If _ -> false\n\n\nlet rec step curr_env expr = \n  match expr with \n  | Float x -> Float x\n  | Var y -> \n    Float (Environment.get_val y curr_env)\n  | Boolean _ -> failwith \"naw\"\n  | Binop (bop, e1, e2) when is_value e1 && is_value e2 ->\n    step_bop bop e1 e2  \n  | Binop (bop, e1, e2) -> \n    Binop (bop, step curr_env e1, step curr_env e2)\n  | Let (x, Float e1, e2) -> let y = (Environment.add_binding x e1 curr_env) in step y e2\n  | Let (x, e1, e2) -> Let (x, step curr_env e1, e2)\n  | If (Float 1.0, e2, _) -> e2\n  | If (Float 0.0, _, e3) -> e3\n  | If (Float _, _, _) -> failwith \"if_guard_err\"\n  | If (e1, e2, e3) -> If (step curr_env e1, e2, e3)\n\n(** [step_bop bop v1 v2] implements the primitive operation\n    [v1 bop v2].  Requires: [v1] and [v2] are both values. *)\nand step_bop bop e1 e2 = match bop, e1, e2 with\n  | Func str, Float a, Float b ->\n    Float ((Arithmetic_CFU.find_function str) [a;b])\n  | _ -> failwith \"precondition violated\"\n\n\n(** [eval e] fully evaluates [e] to a value. *)\nlet rec eval (curr_env:Environment.t) (e : expr) : expr =\n  if is_value e then e\n  else e |> step curr_env |> eval curr_env\n\n(** [string_of_val e] converts [e] to a string.\n    Requires: [e] is a value. *)\nlet string_of_val (e : expr) : string =\n  match e with\n  |Float i -> string_of_float i\n  |Boolean b -> string_of_bool b\n  |_ -> failwith \"precondition violated\"\n\n(** [interp s] interprets [s] by parsing and evaluating it. *)\nlet interp (s : string) (curr_env: Environment.t) : string =\n  try (\n    s |> parse_expr |> eval curr_env |> string_of_val )\n  with\n  |SyntaxError s |Failure s -> s\n\n\nlet rec help_command_helper chnl = \n  match input_line chnl with\n  |s -> print_endline s; help_command_helper chnl\n  |exception End_of_file -> close_in chnl\n\n\nlet rec main () curr_env =\n  ANSITerminal.print_string [red] \">\";\n  match String.trim (String.lowercase_ascii (read_line())) with\n  |\"quit\" -> ()\n  |\"help\" -> let chnl = open_in \"help.txt\" in help_command_helper chnl; main () curr_env\n  |e -> match (interp e curr_env) with\n    |exception Not_found -> print_endline \"Not a valid command please try again\"; main () curr_env\n    |s -> print_endline s;\n      print_endline \"\"; \n      main () curr_env\n\nlet () = main () (Environment.empty)\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/nathan/repos/CS3110/Final-Project/main.ml"},"position":{"line":0,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to find project root dir"}}
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
Found a `.merlin` file at /home/nathan/repos/CS3110/Final-Project
]] Making a new jbuilder package at /home/nathan/repos/CS3110/Final-Project
