### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(oUnit), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package ANSITerminal -modules test.ml > test.ml.depends # cached
# Target: ast.ml.depends, tags: { package(ANSITerminal), package(oUnit), debug, extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package ANSITerminal -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(ANSITerminal), package(oUnit), byte, compile, debug, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse, use_menhir }
ocamlfind ocamlc -c -g -package oUnit -package ANSITerminal -o ast.cmo ast.ml # cached
# Target: main.ml.depends, tags: { package(ANSITerminal), package(oUnit), debug, extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package ANSITerminal -modules main.ml > main.ml.depends # cached
# Target: lexer.mll, tags: { package(ANSITerminal), package(oUnit), debug, extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse, use_menhir }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(ANSITerminal), package(oUnit), debug, extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse, use_menhir }
ocamlfind ocamldep -package oUnit -package ANSITerminal -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(ANSITerminal), package(oUnit), debug, extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse, use_menhir }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
+ menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends
/bin/sh: menhir: command not found
Command exited with code 127.
# Compilation unsuccessful.
